add(a, b, c, d, size):
FunctionDecl 0x7f86b081e400 <basic.c:1:1, line:9:1> line:1:5 add 'int (int *, int *, int *, int *, int)'
|-ParmVarDecl 0x7f86b1004070 <col:9, col:15> col:13 used a 'int *':'int *'
|-ParmVarDecl 0x7f86b10040f0 <col:18, col:24> col:22 used b 'int *':'int *'
|-ParmVarDecl 0x7f86b1004170 <col:27, col:33> col:31 used c 'int *':'int *'
|-ParmVarDecl 0x7f86b10041f0 <col:36, col:42> col:40 used d 'int *':'int *'
|-ParmVarDecl 0x7f86b1004260 <col:45, col:49> col:49 used size 'int'
`-CompoundStmt 0x7f86af815240 <col:55, line:9:1>
  |-DeclStmt 0x7f86b081e828 <line:2:2, col:34>
  | |-VarDecl 0x7f86b081e4e0 <col:2, col:10> col:6 used i 'int' cinit
  | | `-IntegerLiteral 0x7f86b081e538 <col:10> 'int' 0
  | |-VarDecl 0x7f86b081e570 <col:2, col:17> col:13 used j 'int' cinit
  | | `-ImplicitCastExpr 0x7f86b081e5f0 <col:17> 'int' <LValueToRValue>
  | |   `-DeclRefExpr 0x7f86b081e5c8 <col:17> 'int' lvalue ParmVar 0x7f86b1004260 'size' 'int'
  | |-VarDecl 0x7f86b081e620 <col:2, col:27> col:23 used k 'int' cinit
  | | `-BinaryOperator 0x7f86b081e6f8 <col:25, col:27> 'int' '+'
  | |   |-ImplicitCastExpr 0x7f86b081e6c8 <col:25> 'int' <LValueToRValue>
  | |   | `-DeclRefExpr 0x7f86b081e678 <col:25> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  | |   `-ImplicitCastExpr 0x7f86b081e6e0 <col:27> 'int' <LValueToRValue>
  | |     `-DeclRefExpr 0x7f86b081e6a0 <col:27> 'int' lvalue Var 0x7f86b081e570 'j' 'int'
  | |-VarDecl 0x7f86b081e730 <col:2, col:30> col:30 used l 'int'
  | `-VarDecl 0x7f86b081e7a0 <col:2, col:33> col:33 used m 'int'
  |-BinaryOperator 0x7f86b081e9e0 <line:3:2, col:12> 'int' '='
  | |-DeclRefExpr 0x7f86b081e840 <col:2> 'int' lvalue Var 0x7f86b081e730 'l' 'int'
  | `-BinaryOperator 0x7f86b081e9b8 <col:6, col:12> 'int' '+'
  |   |-BinaryOperator 0x7f86b081e950 <col:6, col:10> 'int' '+'
  |   | |-BinaryOperator 0x7f86b081e8e8 <col:6, col:8> 'int' '+'
  |   | | |-ImplicitCastExpr 0x7f86b081e8b8 <col:6> 'int' <LValueToRValue>
  |   | | | `-DeclRefExpr 0x7f86b081e868 <col:6> 'int' lvalue Var 0x7f86b081e7a0 'm' 'int'
  |   | | `-ImplicitCastExpr 0x7f86b081e8d0 <col:8> 'int' <LValueToRValue>
  |   | |   `-DeclRefExpr 0x7f86b081e890 <col:8> 'int' lvalue Var 0x7f86b081e620 'k' 'int'
  |   | `-ImplicitCastExpr 0x7f86b081e938 <col:10> 'int' <LValueToRValue>
  |   |   `-DeclRefExpr 0x7f86b081e910 <col:10> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  |   `-ImplicitCastExpr 0x7f86b081e9a0 <col:12> 'int' <LValueToRValue>
  |     `-DeclRefExpr 0x7f86b081e978 <col:12> 'int' lvalue Var 0x7f86b081e570 'j' 'int'
  |-ForStmt 0x7f86b081f3a8 <line:4:2, line:7:2>
  | |-BinaryOperator 0x7f86b081ea50 <line:4:7, col:11> 'int' '='
  | | |-DeclRefExpr 0x7f86b081ea08 <col:7> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  | | `-IntegerLiteral 0x7f86b081ea30 <col:11> 'int' 0
  | |-<<<NULL>>>
  | |-BinaryOperator 0x7f86b081eb40 <col:14, col:23> 'int' '<'
  | | |-ImplicitCastExpr 0x7f86b081eb28 <col:14> 'int' <LValueToRValue>
  | | | `-DeclRefExpr 0x7f86b081ea78 <col:14> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  | | `-BinaryOperator 0x7f86b081eb00 <col:18, col:23> 'int' '/'
  | |   |-ImplicitCastExpr 0x7f86b081eae8 <col:18> 'int' <LValueToRValue>
  | |   | `-DeclRefExpr 0x7f86b081eaa0 <col:18> 'int' lvalue ParmVar 0x7f86b1004260 'size' 'int'
  | |   `-IntegerLiteral 0x7f86b081eac8 <col:23> 'int' 2
  | |-UnaryOperator 0x7f86b081eb90 <col:26, col:27> 'int' postfix '++'
  | | `-DeclRefExpr 0x7f86b081eb68 <col:26> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  | `-CompoundStmt 0x7f86b081f380 <col:31, line:7:2>
  |   |-BinaryOperator 0x7f86b081f008 <line:5:3, col:33> 'int' '='
  |   | |-ArraySubscriptExpr 0x7f86b081ec30 <col:3, col:6> 'int' lvalue
  |   | | |-ImplicitCastExpr 0x7f86b081ec00 <col:3> 'int *':'int *' <LValueToRValue>
  |   | | | `-DeclRefExpr 0x7f86b081ebb0 <col:3> 'int *':'int *' lvalue ParmVar 0x7f86b1004170 'c' 'int *':'int *'
  |   | | `-ImplicitCastExpr 0x7f86b081ec18 <col:5> 'int' <LValueToRValue>
  |   | |   `-DeclRefExpr 0x7f86b081ebd8 <col:5> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  |   | `-BinaryOperator 0x7f86b081efe0 <col:10, col:33> 'int' '+'
  |   |   |-BinaryOperator 0x7f86b081eeb0 <col:10, col:26> 'int' '+'
  |   |   | |-ImplicitCastExpr 0x7f86b081ee80 <col:10, col:15> 'int' <LValueToRValue>
  |   |   | | `-ArraySubscriptExpr 0x7f86b081ed20 <col:10, col:15> 'int' lvalue
  |   |   | |   |-ImplicitCastExpr 0x7f86b081ed08 <col:10> 'int *':'int *' <LValueToRValue>
  |   |   | |   | `-DeclRefExpr 0x7f86b081ec58 <col:10> 'int *':'int *' lvalue ParmVar 0x7f86b1004070 'a' 'int *':'int *'
  |   |   | |   `-BinaryOperator 0x7f86b081ece0 <col:12, col:14> 'int' '*'
  |   |   | |     |-IntegerLiteral 0x7f86b081ec80 <col:12> 'int' 2
  |   |   | |     `-ImplicitCastExpr 0x7f86b081ecc8 <col:14> 'int' <LValueToRValue>
  |   |   | |       `-DeclRefExpr 0x7f86b081eca0 <col:14> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  |   |   | `-ImplicitCastExpr 0x7f86b081ee98 <col:19, col:26> 'int' <LValueToRValue>
  |   |   |   `-ArraySubscriptExpr 0x7f86b081ee58 <col:19, col:26> 'int' lvalue
  |   |   |     |-ImplicitCastExpr 0x7f86b081ee40 <col:19> 'int *':'int *' <LValueToRValue>
  |   |   |     | `-DeclRefExpr 0x7f86b081ed48 <col:19> 'int *':'int *' lvalue ParmVar 0x7f86b10040f0 'b' 'int *':'int *'
  |   |   |     `-BinaryOperator 0x7f86b081ee18 <col:21, col:25> 'int' '+'
  |   |   |       |-BinaryOperator 0x7f86b081edd0 <col:21, col:23> 'int' '*'
  |   |   |       | |-IntegerLiteral 0x7f86b081ed70 <col:21> 'int' 2
  |   |   |       | `-ImplicitCastExpr 0x7f86b081edb8 <col:23> 'int' <LValueToRValue>
  |   |   |       |   `-DeclRefExpr 0x7f86b081ed90 <col:23> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  |   |   |       `-IntegerLiteral 0x7f86b081edf8 <col:25> 'int' 1
  |   |   `-ImplicitCastExpr 0x7f86b081efc8 <col:28, col:33> 'int' <LValueToRValue>
  |   |     `-ArraySubscriptExpr 0x7f86b081efa0 <col:28, col:33> 'int' lvalue
  |   |       |-ImplicitCastExpr 0x7f86b081ef88 <col:28> 'int *':'int *' <LValueToRValue>
  |   |       | `-DeclRefExpr 0x7f86b081eed8 <col:28> 'int *':'int *' lvalue ParmVar 0x7f86b1004070 'a' 'int *':'int *'
  |   |       `-BinaryOperator 0x7f86b081ef60 <col:30, col:32> 'int' '*'
  |   |         |-ImplicitCastExpr 0x7f86b081ef48 <col:30> 'int' <LValueToRValue>
  |   |         | `-DeclRefExpr 0x7f86b081ef00 <col:30> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  |   |         `-IntegerLiteral 0x7f86b081ef28 <col:32> 'int' 4
  |   `-BinaryOperator 0x7f86b081f358 <line:6:3, col:26> 'int' '='
  |     |-ArraySubscriptExpr 0x7f86b081f0b0 <col:3, col:6> 'int' lvalue
  |     | |-ImplicitCastExpr 0x7f86b081f080 <col:3> 'int *':'int *' <LValueToRValue>
  |     | | `-DeclRefExpr 0x7f86b081f030 <col:3> 'int *':'int *' lvalue ParmVar 0x7f86b10041f0 'd' 'int *':'int *'
  |     | `-ImplicitCastExpr 0x7f86b081f098 <col:5> 'int' <LValueToRValue>
  |     |   `-DeclRefExpr 0x7f86b081f058 <col:5> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  |     `-BinaryOperator 0x7f86b081f330 <col:10, col:26> 'int' '+'
  |       |-ImplicitCastExpr 0x7f86b081f300 <col:10, col:17> 'int' <LValueToRValue>
  |       | `-ArraySubscriptExpr 0x7f86b081f1e8 <col:10, col:17> 'int' lvalue
  |       |   |-ImplicitCastExpr 0x7f86b081f1d0 <col:10> 'int *':'int *' <LValueToRValue>
  |       |   | `-DeclRefExpr 0x7f86b081f0d8 <col:10> 'int *':'int *' lvalue ParmVar 0x7f86b1004070 'a' 'int *':'int *'
  |       |   `-BinaryOperator 0x7f86b081f1a8 <col:12, col:16> 'int' '+'
  |       |     |-BinaryOperator 0x7f86b081f160 <col:12, col:14> 'int' '*'
  |       |     | |-IntegerLiteral 0x7f86b081f100 <col:12> 'int' 2
  |       |     | `-ImplicitCastExpr 0x7f86b081f148 <col:14> 'int' <LValueToRValue>
  |       |     |   `-DeclRefExpr 0x7f86b081f120 <col:14> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  |       |     `-IntegerLiteral 0x7f86b081f188 <col:16> 'int' 1
  |       `-ImplicitCastExpr 0x7f86b081f318 <col:21, col:26> 'int' <LValueToRValue>
  |         `-ArraySubscriptExpr 0x7f86b081f2d8 <col:21, col:26> 'int' lvalue
  |           |-ImplicitCastExpr 0x7f86b081f2c0 <col:21> 'int *':'int *' <LValueToRValue>
  |           | `-DeclRefExpr 0x7f86b081f210 <col:21> 'int *':'int *' lvalue ParmVar 0x7f86b10040f0 'b' 'int *':'int *'
  |           `-BinaryOperator 0x7f86b081f298 <col:23, col:25> 'int' '*'
  |             |-IntegerLiteral 0x7f86b081f238 <col:23> 'int' 2
  |             `-ImplicitCastExpr 0x7f86b081f280 <col:25> 'int' <LValueToRValue>
  |               `-DeclRefExpr 0x7f86b081f258 <col:25> 'int' lvalue Var 0x7f86b081e4e0 'i' 'int'
  `-ReturnStmt 0x7f86af815220 <line:8:2, col:9>
    `-IntegerLiteral 0x7f86af815200 <col:9> 'int' 0
Writing '/var/folders/fx/cxdc1sfd5p50bh7s_4_k03jh0000gn/T/AST-9d3123.dot'...  done. 
Running '/usr/local/bin/dot' program...  done. 
 done. 


